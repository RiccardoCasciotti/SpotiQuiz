// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'

    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }



  static FirebaseOptions web = FirebaseOptions(
    apiKey:  dotenv.get('APIKEY_WEB', fallback: 'sane-default'),
    appId: dotenv.get('APPID_WEB', fallback: 'sane-default'),
    messagingSenderId: '954338554494',
    projectId: dotenv.get('PROJECT_ID', fallback: 'sane-default'),
    authDomain: dotenv.env['AUTH_DOMAIN'],
    databaseURL: dotenv.env['DB_URL'],
    storageBucket: dotenv.env['STORAGE_BUCKET'],
    measurementId: 'G-7K9FNZG737',
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.get('APIKEY_ANDROID', fallback: 'sane-default'),
    appId: dotenv.get('APPID_ANDROID', fallback: 'sane-default'),
    messagingSenderId: '954338554494',
    projectId: dotenv.get('PROJECT_ID', fallback: 'sane-default'),
    databaseURL:  dotenv.env['DB_URL'],
    storageBucket: dotenv.env['STORAGE_BUCKET'],
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.get('APIKEY_IOS', fallback: 'sane-default'),
    appId: dotenv.get('APPID_IOS', fallback: 'sane-default'),
    messagingSenderId: '954338554494',
    projectId: dotenv.get('PROJECT_ID', fallback: 'sane-default'),
    databaseURL: dotenv.env['DB_URL'],
    storageBucket: dotenv.env['STORAGE_BUCKET'],
    iosClientId: dotenv.get('IOS_CLIENT_ID', fallback: 'sane-default'),
    iosBundleId: dotenv.get('IOS_BUNDLE', fallback: 'sane-default'),
  );
}
